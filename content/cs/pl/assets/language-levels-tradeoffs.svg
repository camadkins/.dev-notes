<svg width="1000" height="1400" viewBox="0 0 1000 1400" xmlns="http://www.w3.org/2000/svg" font-family="Inter, system-ui, -apple-system, Segoe UI, Roboto, sans-serif">
  <title>Language Levels &amp; Trade-offs — Machine → Assembly → High-level</title>

  <defs>
    <!-- Shadows & arrows -->
    <filter id="shadow" x="-20%" y="-20%" width="140%" height="140%">
      <feDropShadow dx="0" dy="1" stdDeviation="2" flood-color="#000" flood-opacity="0.15"></feDropShadow>
    </filter>
    <marker id="arrowUp" viewBox="0 0 10 10" refX="5" refY="9" markerWidth="10" markerHeight="10" orient="auto">
      <path d="M 0 10 L 5 0 L 10 10" fill="#0b5ed7"></path>
    </marker>
    <marker id="arrowDown" viewBox="0 0 10 10" refX="5" refY="1" markerWidth="10" markerHeight="10" orient="auto">
      <path d="M 0 0 L 5 10 L 10 0" fill="#c1121f"></path>
    </marker>
    <!-- Gradients: lighter at the top rung -->
    <linearGradient id="hlGrad" x1="0" y1="0" x2="0" y2="1">
      <stop offset="0%" stop-color="#f8fbff"></stop>
      <stop offset="100%" stop-color="#e7f0ff"></stop>
    </linearGradient>
    <linearGradient id="asmGrad" x1="0" y1="0" x2="0" y2="1">
      <stop offset="0%" stop-color="#eef2f6"></stop>
      <stop offset="100%" stop-color="#dde3ea"></stop>
    </linearGradient>
    <linearGradient id="machGrad" x1="0" y1="0" x2="0" y2="1">
      <stop offset="0%" stop-color="#e9ecef"></stop>
      <stop offset="100%" stop-color="#d1d9e0"></stop>
    </linearGradient>
    <style>
      .title{font-size:22px;font-weight:700;fill:#111}
      .panel{rx:16;stroke:#c0c7cf}
      .head{font-size:18px;font-weight:700;fill:#111}
      .desc{font-size:14px;fill:#333}
      .ex   {font-size:13px;fill:#555}
      .rail {stroke:#ced4da;stroke-width:6;stroke-linecap:round}
    </style>
  </defs>

  <!-- Header -->
  <text x="500" y="56" text-anchor="middle" class="title">Language Levels &amp; Trade-offs</text>
  <text x="500" y="80" text-anchor="middle" font-size="14" fill="#555">Machine → Assembly → High-level</text>

  <!-- Ladder rails -->
  <line x1="120" y1="260" x2="120" y2="1150" class="rail"></line>
  <line x1="880" y1="260" x2="880" y2="1150" class="rail"></line>

  <!-- Rung / box sizes -->
  <!-- Top: High-level -->
  <g transform="translate(150,300)" filter="url(#shadow)">
    <rect class="panel" x="0" y="0" width="700" height="220" fill="url(#hlGrad)"></rect>
    <text x="20" y="36" class="head">High-level (portable, abstract)</text>
    <text x="20" y="66" class="desc">Focus on readability, portability, and expressiveness.</text>
    <text x="20" y="100" class="ex">Examples: Python, Java, Rust, Go</text>
    <text x="20" y="126" class="ex">Features: memory safety (in some), rich standard libs, GC or ownership models, modules, types.</text>
  </g>

  <!-- Middle: Assembly -->
  <g transform="translate(150,600)" filter="url(#shadow)">
    <rect class="panel" x="0" y="0" width="700" height="220" fill="url(#asmGrad)"></rect>
    <text x="20" y="36" class="head">Assembly (mnemonics, registers)</text>
    <text x="20" y="66" class="desc">One step above machine code; explicit registers and instructions.</text>
    <text x="20" y="100" class="ex">Examples: x86-64 asm, ARMv8-A asm, MIPS32</text>
    <text x="20" y="126" class="ex">Features: labels, directives, calling conventions; still architecture-specific.</text>
  </g>

  <!-- Bottom: Machine -->
  <g transform="translate(150,900)" filter="url(#shadow)">
    <rect class="panel" x="0" y="0" width="700" height="220" fill="url(#machGrad)"></rect>
    <text x="20" y="36" class="head">Machine (binary, hardware-specific)</text>
    <text x="20" y="66" class="desc">Raw opcodes executed by the CPU; exact ISA determines meaning.</text>
    <text x="20" y="100" class="ex">Examples: x86-64, ARMv8-A, RISC-V</text>
    <text x="20" y="126" class="ex">Features: instruction formats, addressing modes, flags, micro-architectural effects.</text>
  </g>

  <!-- Side trade-off arrows -->
  <!-- Left side: Portability ↑ Abstraction ↑ -->
  <g>
    <path d="M 60 1120 L 60 260" fill="none" stroke="#0b5ed7" stroke-width="3" marker-end="url(#arrowUp)"></path>
    <text x="40" y="520" transform="rotate(-90 40 520)" text-anchor="middle" font-size="14" fill="#0b5ed7" font-weight="600">
      Portability ↑   Abstraction ↑
    </text>
  </g>

  <!-- Right side: Control ↓ Efficiency ↓ -->
  <g>
    <path d="M 940 260 L 940 1120" fill="none" stroke="#c1121f" stroke-width="3" marker-end="url(#arrowDown)"></path>
    <text x="960" y="520" transform="rotate(90 960 520)" text-anchor="middle" font-size="14" fill="#c1121f" font-weight="600">
      Control ↓   Efficiency ↓
    </text>
  </g>

  <!-- Rung connectors (visual ladder) -->
  <line x1="120" y1="410" x2="880" y2="410" stroke="#d7dee5" stroke-width="4"></line>
  <line x1="120" y1="710" x2="880" y2="710" stroke="#d7dee5" stroke-width="4"></line>
  <line x1="120" y1="1010" x2="880" y2="1010" stroke="#d7dee5" stroke-width="4"></line>

  <!-- Footer caption -->
  <text x="500" y="1320" text-anchor="middle" font-size="12" fill="#666">
    Higher levels increase portability &amp; abstraction; lower levels increase control &amp; hardware-proximate efficiency.
  </text>

  <metadata>Intended path: /cs/pl/assets/language-levels-tradeoffs.svg; canvas 1000x1400; ladder layout with trade-off arrows</metadata>
</svg>
